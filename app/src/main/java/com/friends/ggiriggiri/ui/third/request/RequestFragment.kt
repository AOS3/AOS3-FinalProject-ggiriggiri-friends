package com.friends.ggiriggiri.ui.third.request

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Matrix
import android.media.ExifInterface
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.text.Editable
import android.text.TextWatcher
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.FileProvider
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import com.friends.ggiriggiri.App
import com.friends.ggiriggiri.databinding.FragmentRequestBinding
import com.friends.ggiriggiri.ui.first.register.UserModel
import com.google.firebase.Firebase
import com.google.firebase.storage.storage
import dagger.hilt.android.AndroidEntryPoint
import java.io.File
import java.io.IOException

@AndroidEntryPoint
class RequestFragment : Fragment() {

    private lateinit var binding: FragmentRequestBinding
    private val viewModel: RequestViewModel by viewModels()

    // ÏÇ¨ÏßÑÏù¥ Ï†ÄÏû•Îê† Í≤ΩÎ°ú
    private lateinit var filePath: String
    private lateinit var contentUri: Uri
    private lateinit var cameraLauncher: ActivityResultLauncher<Uri>

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentRequestBinding.inflate(inflater, container, false)

        filePath = requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString()

        setupObservers()
        setupListeners()
        createCameraLauncher()

        return binding.root
    }

    // ViewModel Í¥ÄÏ∞∞ Î∞è UI ÏóÖÎç∞Ïù¥Ìä∏
    private fun setupObservers() {
        viewModel.isImageUploaded.observe(viewLifecycleOwner) { isUploaded ->
            if (isUploaded) {
                binding.btnRequestUploadImage.visibility = View.GONE
            }
        }

        viewModel.isSubmitEnabled.observe(viewLifecycleOwner) { isEnabled ->
            binding.btnRequestSubmit.isEnabled = isEnabled
        }
    }

    // UI Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
    private fun setupListeners() {
        binding.tbRequest.setNavigationOnClickListener {
            navigateToHomeFragment()
        }

        binding.btnRequestUploadImage.setOnClickListener {
            openCamera()
        }

        binding.etRequestInput.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                viewModel.setTextEntered(!s.isNullOrEmpty())
            }

            override fun afterTextChanged(s: Editable?) {}
        })

        binding.btnRequestSubmit.setOnClickListener {
            saveRequestToFirestore { success ->
                if (success) {
                    navigateToHomeFragment() // üî• Firestore Ï†ÄÏû• ÏôÑÎ£å ÌõÑ ÌôîÎ©¥ Ïù¥Îèô
                }
            }
        }

        binding.etRequestInput.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                val currentLength = s?.length ?: 0

                // ÌòÑÏû¨ ÏûÖÎ†•Îêú Í∏ÄÏûê Ïàò / ÏµúÎåÄ Í∏ÄÏûê Ïàò ÏóÖÎç∞Ïù¥Ìä∏
                binding.tvRequestCharCount.text = "$currentLength/100"

                // ÌÖçÏä§Ìä∏ ÏûÖÎ†• ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                viewModel.setTextEntered(currentLength > 0)

                // Í∏ÄÏûê ÏàòÍ∞Ä 100ÏûêÎ•º Ï¥àÍ≥ºÌïòÎ©¥ Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌëúÏãú Î∞è ÏûÖÎ†• Ï†úÌïú
                if (currentLength >= 100) {
                    Toast.makeText(requireContext(), "ÏµúÎåÄ 100ÏûêÍπåÏßÄ ÏûÖÎ†•Ìï† Ïàò ÏûàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }

            override fun afterTextChanged(s: Editable?) {
                // ÏµúÎåÄ Í∏ÄÏûê Ïàò(100Ïûê) Ï¥àÍ≥º Ïãú Ï∂îÍ∞Ä ÏûÖÎ†• Î∞©ÏßÄ
                if (s != null && s.length > 100) {
                    s.delete(100, s.length)
                }
            }
        })
    }

    // FirestoreÏóê ÏöîÏ≤≠ Ï†ÄÏû•
    private fun saveRequestToFirestore(onComplete: (Boolean) -> Unit) {
        val loginUser = (requireActivity().application as App).loginUserModel
        val requestMessage = binding.etRequestInput.text.toString()

        if (requestMessage.isNotEmpty()) {
            contentUri?.let { uri ->
                uploadImageToFirebase(uri, { imageUrl ->
                    saveRequest(requestMessage, imageUrl, loginUser, onComplete)
                }, {
                    Toast.makeText(requireContext(), "Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®!", Toast.LENGTH_SHORT).show()
                    onComplete(false)
                })
            } ?: saveRequest(requestMessage, "", loginUser, onComplete)
        } else {
            Toast.makeText(requireContext(), "Î©îÏãúÏßÄÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!", Toast.LENGTH_SHORT).show()
            onComplete(false)
        }
    }

    // FirestoreÏóê Ï†ÄÏû• Ìï®Ïàò (Ïù¥ÎØ∏ÏßÄ URL Ìè¨Ìï®)
    private fun saveRequest(requestMessage: String, imageUrl: String, loginUser: UserModel, onComplete: (Boolean) -> Unit) {
        viewModel.saveRequest(
            userDocumentId = loginUser.userDocumentId,
            requestMessage = requestMessage,
            requestImage = imageUrl,
            groupDocumentId = loginUser.userGroupDocumentID,
            onSuccess = { requestId ->
                Toast.makeText(requireContext(), "ÏöîÏ≤≠Ïù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! ID: $requestId", Toast.LENGTH_SHORT).show()
                onComplete(true)
            },
            onFailure = {
                Toast.makeText(requireContext(), "ÏöîÏ≤≠ Ï†ÄÏû• Ïã§Ìå®!", Toast.LENGTH_SHORT).show()
                onComplete(false)
            }
        )
    }

    // Firebase StorageÏóê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÌõÑ Îã§Ïö¥Î°úÎìú URL Î∞òÌôò
    private fun uploadImageToFirebase(imageUri: Uri, onSuccess: (String) -> Unit, onFailure: () -> Unit) {
        val storageRef = Firebase.storage.reference.child("request_images/${System.currentTimeMillis()}.jpg")

        storageRef.putFile(imageUri)
            .addOnSuccessListener {
                storageRef.downloadUrl.addOnSuccessListener { uri ->
                    onSuccess(uri.toString())
                }.addOnFailureListener {
                    onFailure()
                }
            }
            .addOnFailureListener {
                onFailure()
            }
    }

    // Ïπ¥Î©îÎùº Ïã§Ìñâ
    private fun openCamera() {
        val fileName = "temp_${System.currentTimeMillis()}.jpg"
        val picPath = "$filePath/$fileName"
        val file = File(picPath)

        contentUri = FileProvider.getUriForFile(
            requireContext(),
            "com.friends.ggiriggiri.fileprovider",
            file
        )

        cameraLauncher.launch(contentUri)
    }

    // Ïπ¥Î©îÎùº Îü∞Ï≤ò ÏÑ§Ï†ï
    private fun createCameraLauncher() {
        cameraLauncher = registerForActivityResult(ActivityResultContracts.TakePicture()) { success ->
            if (success) {
                processCapturedImage()
            } else {
                Toast.makeText(requireContext(), "ÏÇ¨ÏßÑ Ï¥¨ÏòÅÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // Ï¥¨ÏòÅÎêú Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨
    private fun processCapturedImage() {
        try {
            val inputStream = requireContext().contentResolver.openInputStream(contentUri)
            val bitmap = BitmapFactory.decodeStream(inputStream)

            if (bitmap != null) {
                val rotatedBitmap = rotateBitmap(bitmap, getDegree(contentUri))

                binding.ivRequestUploadedImage.apply {
                    visibility = View.VISIBLE
                    setImageBitmap(rotatedBitmap)
                }

                binding.ivRequestImagePlaceholder.visibility = View.GONE
                binding.tvRequestImageGuide.visibility = View.GONE
                binding.tvRequestImageSubGuide.visibility = View.GONE
                binding.btnRequestUploadImage.visibility = View.GONE

                viewModel.setImageUploaded(true)
            } else {
                Toast.makeText(requireContext(), "Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(requireContext(), "ÏÇ¨ÏßÑÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    // Ïù¥ÎØ∏ÏßÄ ÌöåÏ†Ñ Î≥¥Ï†ï
    private fun rotateBitmap(bitmap: Bitmap, degree: Int): Bitmap {
        val matrix = Matrix().apply { postRotate(degree.toFloat()) }
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, false)
    }

    // ÏÇ¨ÏßÑÏùò ÌöåÏ†Ñ Í∞ÅÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞
    private fun getDegree(uri: Uri): Int {
        return try {
            val inputStream = requireContext().contentResolver.openInputStream(uri)
            inputStream?.use {
                val exifInterface = ExifInterface(it)
                when (exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL)) {
                    ExifInterface.ORIENTATION_ROTATE_90 -> 90
                    ExifInterface.ORIENTATION_ROTATE_180 -> 180
                    ExifInterface.ORIENTATION_ROTATE_270 -> 270
                    else -> 0
                }
            } ?: 0
        } catch (e: IOException) {
            e.printStackTrace()
            0
        }
    }

    // HomeFragmentÎ°ú Ïù¥Îèô
    private fun navigateToHomeFragment() {
        requireActivity().onBackPressedDispatcher.onBackPressed()
    }
}
